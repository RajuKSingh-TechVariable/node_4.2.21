swagger: "2.0"
info:
  description: "This is a sample REST API server."
  version: "1.0.0"
  title: "REST API"
tags:
  - name: "user"
    description: "Operations about user"
schemes:
  - "http"
paths:
  /users:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/userRequest"
      responses:
        "201":
          description: "successful operation, Created"
          schema:
            $ref: "#/definitions/userResponse"
        "400":
          $ref: "#/responses/badRequest"
        "401":
          $ref: "#/responses/unauthorized"
        "500":
          $ref: "#/responses/internalServer"
    get:
      tags:
        - "user"
      summary: "Display all user"
      description: "This can only be done by the logged in user."
      operationId: "displayUser"
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/userResponse"
        "401":
          $ref: "#/responses/unauthorized"
        "500":
          $ref: "#/responses/internalServer"
  /users/{id}:
    get:
      tags:
        - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "The user that needs to be fetched."
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/userResponse"
        "400":
          $ref: "#/responses/badRequest"
        "401":
          $ref: "#/responses/unauthorized"
        "404":
          $ref: "#/responses/notFound"
        "500":
          $ref: "#/responses/internalServer"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/userRequest"
      responses:
        "200":
          description: "Updated"
          schema:
            $ref: "#/definitions/userResponse"
        "400":
          $ref: "#/responses/badRequest"
        "401":
          $ref: "#/responses/unauthorized"
        "404":
          $ref: "#/responses/notFound"
        "500":
          $ref: "#/responses/internalServer"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        "204":
          description: "No Content"
        "400":
          $ref: "#/responses/badRequest"
        "401":
          $ref: "#/responses/unauthorized"
        "404":
          $ref: "#/responses/notFound"
        "500":
          $ref: "#/responses/internalServer"

responses:
  unauthorized:
    description: "Unauthorized"
    schema:
      $ref: "#/definitions/unauthorised"
  notFound:
    description: "Not Found"
    schema:
      $ref: "#/definitions/notFound"
  internalServer:
    description: "Internal Server Error"
    schema:
      $ref: "#/definitions/internalServer"
  badRequest:
    description: "Bad Request"
    schema:
      $ref: "#/definitions/badRequest"
